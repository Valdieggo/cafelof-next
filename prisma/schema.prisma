generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  country_id   Int       @id @default(autoincrement())
  country_name String    @unique
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt
  regions      Region[]
}

model Region {
  region_id   Int       @id @default(autoincrement())
  region_name String
  country_id  Int
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  cities      City[]
  country     Country   @relation(fields: [country_id], references: [country_id])

  @@index([country_id])
}

model City {
  city_id    Int           @id @default(autoincrement())
  city_name  String
  region_id  Int
  created_at DateTime      @default(now())
  updated_at DateTime?     @updatedAt
  region     Region        @relation(fields: [region_id], references: [region_id])
  addresses  UserAddress[]

  @@index([region_id])
}

model UserAddress {
  user_address_id     Int       @id @default(autoincrement())
  user_address_street String
  city_id             Int
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  users               User[]
  city                City      @relation(fields: [city_id], references: [city_id])

  @@index([city_id])
}

model User {
  user_phone_number String?
  user_address_id   Int?
  created_at        DateTime     @default(now())
  updated_at        DateTime?    @updatedAt
  user_password     String?
  id                String       @id @default(cuid())
  user_role         UserRole     @default(USER)
  name              String?
  image             String?
  email             String       @unique
  emailVerified     DateTime?
  Account           Account?
  carts             Cart[]
  orders            Order[]
  Session           Session[]
  address           UserAddress? @relation(fields: [user_address_id], references: [user_address_id])

  @@index([user_address_id])
}

model Account {
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  id                       String   @id @default(cuid())
  userId                   String   @unique
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_uq")
}

model Session {
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String   @id @default(cuid())
  token      String   @unique
  expires    DateTime
  email      String

  @@unique([email, token], map: "VerificationToken_identifier_token_uq")
}

model ProductCategory {
  product_category_id          Int       @id @default(autoincrement())
  product_category_name        String    @unique
  product_category_description String?
  created_at                   DateTime  @default(now())
  updated_at                   DateTime? @updatedAt
  products                     Product[]
}

model Product {
  product_id          Int                @id @default(autoincrement())
  product_name        String
  product_price       Float
  product_image_url   String?
  created_at          DateTime           @default(now())
  updated_at          DateTime?          @updatedAt
  product_category_id Int
  product_slug        String             @unique
  carts               Cart[]
  inventories         Inventory[]
  category            ProductCategory    @relation(fields: [product_category_id], references: [product_category_id])
  attributes          ProductAttribute[]

  @@index([product_category_id])
}

model Attribute {
  attribute_id   Int                @id @default(autoincrement())
  attribute_name String             @unique
  created_at     DateTime           @default(now())
  updated_at     DateTime?          @updatedAt
  possibleValues AttributeEnum[]
  productValues  ProductAttribute[]
}

model AttributeEnum {
  attribute_enum_id Int       @id @default(autoincrement())
  attribute_id      Int
  value             String
  created_at        DateTime  @default(now())
  updated_at        DateTime? @updatedAt
  attribute         Attribute @relation(fields: [attribute_id], references: [attribute_id])

  @@index([attribute_id])
}

model ProductAttribute {
  product_attribute_id Int       @id @default(autoincrement())
  product_id           Int
  attribute_id         Int
  created_at           DateTime  @default(now())
  updated_at           DateTime? @updatedAt
  attribute            Attribute @relation(fields: [attribute_id], references: [attribute_id])
  product              Product   @relation(fields: [product_id], references: [product_id])

  @@index([product_id])
  @@index([attribute_id])
}

model Cart {
  cart_id       Int           @id @default(autoincrement())
  cart_quantity Int
  user_id       String
  product_id    Int
  created_at    DateTime      @default(now())
  updated_at    DateTime?     @updatedAt
  attributes    String
  product       Product       @relation(fields: [product_id], references: [product_id])
  user          User          @relation(fields: [user_id], references: [id])
  orderDetails  OrderDetail[]

  @@index([product_id])
  @@index([user_id])
}

model Inventory {
  inventory_id       Int       @id @default(autoincrement())
  inventory_quantity Int
  product_id         Int
  created_at         DateTime  @default(now())
  updated_at         DateTime? @updatedAt
  product            Product   @relation(fields: [product_id], references: [product_id])

  @@index([product_id])
}

model Discount {
  discount_id          Int       @id @default(autoincrement())
  discount_amount      Int
  discount_description String
  created_at           DateTime  @default(now())
  updated_at           DateTime? @updatedAt
  orders               Order[]
}

model Order {
  order_id            String        @id @default(cuid())
  order_date          DateTime
  order_total_price   Float
  user_id             String
  discount_id         Int?
  created_at          DateTime      @default(now())
  updated_at          DateTime?     @updatedAt
  authorization_code  String?
  card_last_four      String?
  installments_number Int?
  payment_type_code   String?
  response_code       Int?
  transaction_amount  Int?
  transaction_status  String?
  discount            Discount?     @relation(fields: [discount_id], references: [discount_id])
  user                User          @relation(fields: [user_id], references: [id])
  orderDetails        OrderDetail[]
  shipments           Shipment[]

  @@index([discount_id])
  @@index([user_id])
}

model Shipment {
  shipment_id     Int       @id @default(autoincrement())
  shipment_status String
  order_id        String
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  order           Order     @relation(fields: [order_id], references: [order_id])

  @@index([order_id])
}

model OrderDetail {
  order_detail_id Int       @id @default(autoincrement())
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  order_id        String
  cart_id         Int
  cart            Cart      @relation(fields: [cart_id], references: [cart_id])
  order           Order     @relation(fields: [order_id], references: [order_id])

  @@index([cart_id])
  @@index([order_id])
}

model ContactForm {
  contact_form_id      Int      @id @default(autoincrement())
  contact_form_name    String
  contact_form_message String
  contact_form_email   String
  created_at           DateTime @default(now())
}

enum UserRole {
  ADMIN
  USER
}
